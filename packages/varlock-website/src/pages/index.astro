---
import { Image } from "astro:assets";

import Layout from "../layouts/Layout.astro";
import SecretReveal from "../components/SecretReveal.vue";
import { LinkButton, Code, Card } from "@astrojs/starlight/components";
import VarlockRetroBanner from "../components/VarlockRetroBanner.astro";
import SignUpForm from "../components/SignUpForm.astro";

import validationImg from "../assets/demo-images/failing-validation.png";
import intellisenseImg from "../assets/demo-images/intellisense.png";
---

<Layout showSearch={false}>
  <main>
    <div class="container">
      <div class="homepage-hero not-content">
        <VarlockRetroBanner />
        <h1>
          Environment variables<br />with the right amount of magic
        </h1>
      </div>
      <Code
        title=".env.schema"
        lang="env-spec"
        code=`
# API key with validation, securely fetched from 1Password
# @required @sensitive @type=string(startsWith=sk-)
OPENAI_API_KEY=exec('op read "op://api-prod/openai/api-key"')

# Non-secret value, included directly
# @type=url
SOME_SERVICE_API_URL=https://api.someservice.com
    `
      />
      <p class="env-spec-example-note">
        Use <i>@decorator comments</i> in your .env file(s) to create a declarative
        schema for your config and a <i>new function call syntax</i> to securely
        load secrets from external sources.
      </p>

      <div class="button-container">
        <LinkButton href="getting-started/installation">Get Started</LinkButton>
        <LinkButton href="reference/item-decorators">Reference Docs</LinkButton>
      </div>

      <div class="features-grid">
        <div>
          <div>
            <h3>Validation</h3>
            <p>
              Powerful validation capabilities, without custom logic.
              Misconfiguration errors are surfaced much earlier in your
              development cycle, with clear error messages.
            </p>
          </div>
          <Image
            src={validationImg}
            alt="Validation demo"
            class="img-with-border"
          />
        </div>
        <div>
          <div>
            <h3>Type-safety</h3>
            <p>
              Automatically generate types according to your schema instead of
              writing them by hand.
            </p>
          </div>
          <Image
            src={intellisenseImg}
            alt="Intellisense demo"
            class="img-with-border"
          />
        </div>
        <div>
          <div>
            <h3>Security</h3>
            <p>
              Protect your secrets from accidental leaks. Redact secrets in
              stdout and global console methods.
            </p>
          </div>
          <Image
            src={intellisenseImg}
            alt="Intellisense demo"
            class="img-with-border"
          />
        </div>
        <div>
          <div>
            <h3>Environments</h3>
            <p>
              Compose defaults, environment-specific .env files, and local
              git-ignored overrides.
            </p>
          </div>
          <Image
            src={intellisenseImg}
            alt="Intellisense demo"
            class="img-with-border"
          />
        </div>
        <div>
          <div>
            <h3>Secure secrets</h3>
            <p>Read from any external provider via CLI commands.</p>
          </div>
          <Image
            src={intellisenseImg}
            alt="Intellisense demo"
            class="img-with-border"
          />
        </div>
      </div>
      <!-- <SecretReveal client:load /> -->

      <div class="button-container">
        <LinkButton href="getting-started/installation">Get Started</LinkButton>
        <LinkButton href="reference/item-decorators">Reference Docs</LinkButton>
      </div>

      <div class="button-container"></div>

      <h2>Installation</h2>
      <Code
        lang="bash"
        code=`
# Install as standalone CLI via homebrew
brew install varlock

# OR Install via cURL
curl -sSfL https://varlock.dev/install.sh | sh -s

# OR init and install as a dependency in a js project
npx varlock init
    `
      />
      <SignUpForm />
    </div>
  </main>
</Layout>

<style is:global>
  .container {
    max-width: 1000px;
    margin: 0 auto;
    padding: 2rem 1rem;
    gap: 2rem;
  }

  .button-container {
    display: flex;
    justify-content: center;
    gap: 1rem;
    a {
      display: block;
      text-align: center;
    }
  }

  .button-container > .sl-link-button {
    min-width: 25%;
    border: 2px solid transparent;
  }

  .button-container > .sl-link-button:hover {
    background-color: var(--sl-color-black);
    color: var(--sl-color-text-accent);
    border: 2px solid var(--sl-color-text-accent);
    animation: pixelate 1.25s infinite;
  }

  @keyframes pixelate {
    0% {
      border-style: solid;
    }
    25% {
      border-style: dotted;
    }
    50% {
      border-style: dashed;
    }
    75% {
      border-style: dotted;
    }
    100% {
      border-style: solid;
    }
  }

  .button-container > .sl-link-button::after {
    content: "-->";
    margin-left: 0.5rem;
  }

  h1 {
    text-align: center;
  }

  .description {
    margin-bottom: 2rem;
    font-size: 1.5rem;
  }

  .component-container {
    margin-bottom: 3rem;
  }

  /* Card styles */
  .card {
    border: 1px dotted var(--brand-purple--t1);
    position: relative;
    background: var(--sl-color-background);
    transition: transform 0.2s ease;
  }

  .card:hover {
    transform: translateY(-2px);
  }

  .card::before {
    content: "";
    position: absolute;
    top: 0;
    left: 0;
    width: 10px;
    height: 10px;
    border-top: 2px dotted var(--brand-purple--t1);
    border-left: 2px dotted var(--brand-purple--t1);
  }

  .card::after {
    content: "";
    position: absolute;
    bottom: 0;
    right: 0;
    width: 10px;
    height: 10px;
    border-bottom: 2px dotted var(--brand-purple--t1);
    border-right: 2px dotted var(--brand-purple--t1);
  }

  .card {
    border-bottom: 1px dotted var(--brand-purple--t1);
    padding: 1rem;
  }

  .card {
    padding: 1rem;
  }

  .card > .title {
    /* color: var(--brand-purple--text); */
    font-family: var(--font-pixel);
    font-weight: var(--font-pixel-weight);
    margin: 0;
  }

  .card ul {
    margin: 0;
    padding-left: 1.5rem;
  }

  .card li {
    margin-bottom: 0.5rem;
  }

  .card li:last-child {
    margin-bottom: 0;
  }

  .features-grid {
    > div {
      margin-top: 3rem;
      display: grid;
      grid-template-columns: 3fr 5fr;
      gap: 1rem;
      align-items: center;
      @media screen and (max-width: 700px) {
        grid-template-columns: 1fr;
      }
    }
    h3 {
      /* font-size: 36px; */
    }
    img {
      margin: 0;
    }
  }
  .homepage-hero {
    text-align: center;
    h1 {
      zoom: 0.8;
      margin: 0.5em 0 1em;
    }
  }
  .env-spec-example-note {
    padding: 0 1em;
  }
</style>
